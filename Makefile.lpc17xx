#!/bin/bash
# make clean && make; cat deps; find . -name '*.o'

# Must have utils ( CodeSourcery )
CC=arm-none-eabi-gcc
AR=arm-none-eabi-ar
MKDIR=mkdir
CP=cp -f
RM=rm

ifndef $F_CPU
F_CPU=80000000
endif

OPTIMIZATION = s
LSCRIPT=LPC17xx.ld

# Final name
LIB=libehal-$(MCU)-$(F_CPU).a

# Get the lib folder based on the toolchain location.
# Where to put .a
LIB_INSTALL_DIR=$(shell dirname $(shell which $(CC)))/../lib
# Where to put .h
INC_INSTALL_DIR=$(shell dirname $(shell which $(CC)))/../include/ehal

# Get folders from within ehal.
GENERIC_PATH=ehal
PORTABLE_PATH=ehal/portable
SPECIFIC_PATH=ehal/lpc17xx


#  Compiler Options

CDEBUG =-gdwarf-2
CWARN =-Wall -Wstrict-prototypes

# optimization for compiling all the .c at the same time
CTUNING=-funsigned-char -funsigned-bitfields -fpack-struct -fshort-enums \
-ffunction-sections -fno-inline-small-functions -fno-split-wide-types \
-fno-tree-scev-cprop -Wl,--relax,--gc-sections

INCLUDE_DIR=-I. -I./ehal -I./$(SPECIFIC_PATH) -I./$(GENERIC_PATH)\
-I./$(GENERIC_PATH)/portable
CFLAGS = $(CDEBUG) $(CDEFS) $(CINCS) -O$(OPTIMIZATION) $(CWARN) $(CSTANDARD) \
$(CEXTRA) $(INCLUDE_DIR)

ALL_CFLAGS=-fno-common -mcpu=cortex-m3 -mthumb $(CFLAGS) -Dehal_$(MCU) -DF_CPU=$(F_CPU)


# Resources definition. No need to change, change the ifeq of specific MCUs.


PORT=					\
	$(SPECIFIC_PATH)/port_init.c	\
	$(SPECIFIC_PATH)/port_setdir.c	\
	$(SPECIFIC_PATH)/port_write.c	\
	$(SPECIFIC_PATH)/port_read.c	\
	$(SPECIFIC_PATH)/port_specific.h\
	$(GENERIC_PATH)/port.h

ifeq ($(MCU),lpc1768)
RESOURCES+=$(PORT)
endif

# .c + .h
RESOURCES+= $(GENERIC_PATH)/tinytypes.h

# .h only
INC=$(filter %.h, $(RESOURCES))
# .c only
SRC=$(filter %.c, $(RESOURCES))
# one object file per MCU
OBJ=$(SRC:%.c=%-$(MCU)-$(F_CPU).o)

.PHONY: all install clean
all: $(LIB)

install: all
	$(MKDIR) -p $(INC_INSTALL_DIR)
	$(CP) $(LIB) $(LIB_INSTALL_DIR)
	$(CP) $(INC) $(INC_INSTALL_DIR)

$(LIB): $(OBJ)
	$(AR) rcs $@ $^

%-$(MCU)-$(F_CPU).o : %.c
	$(CC) $(ALL_CFLAGS) -c $< -o $@

clean:
	$(RM) -f $(OBJ) $(LIB)
