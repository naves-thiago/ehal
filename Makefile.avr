# Must have utils
CC=avr-gcc
AR=avr-ar
MKDIR=mkdir
CP=cp -f
RM=rm

ifndef $F_CPU
F_CPU=8000000
endif

# Final name
LIB=libehal-$(MCU)-$(F_CPU).a

# Get the lib folder based on the toolchain location.
# Where to put .a
LIB_INSTALL_DIR=$(shell dirname $(shell which $(CC)))/../avr/lib
# Where to put .h
INC_INSTALL_DIR=$(shell dirname $(shell which $(CC)))/../avr/include/ehal

# Get folders from within ehal.
GENERIC_PATH=ehal
PORTABLE_PATH=ehal/portable
SPECIFIC_PATH=ehal/avr

CDEBUG =-gdwarf-2
CWARN =-Wall -Wstrict-prototypes
# optimization for compiling all the .c at the same time
CTUNING=-funsigned-char -funsigned-bitfields -fpack-struct -fshort-enums \
-ffunction-sections -fno-inline-small-functions -fno-split-wide-types \
-fno-tree-scev-cprop -Wl,--relax,--gc-sections

INCLUDE_DIR=-I. -I./ehal -I./$(SPECIFIC_PATH) -I./$(GENERIC_PATH)\
-I./$(GENERIC_PATH)/portable

CFLAGS=-mmcu=$(MCU) -Dehal_$(MCU) -DF_CPU=$(F_CPU)\
       $(CDEBUG) $(CDEFS) $(CINCS) -Os $(CWARN) $(CSTANDARD) \
       $(CEXTRA) $(INCLUDE_DIR)

LDFLAGS=

# Resources definition. No need to change, change the ifeq of specific MCUs.

# portable
include Portable.deps

# Specific
CPU=						\
	$(SPECIFIC_PATH)/cpu_init.c		\
	$(SPECIFIC_PATH)/cpu_ien.c		\
	$(SPECIFIC_PATH)/cpu_idis.c		\
	$(GENERIC_PATH)/cpu.h
PORT=						\
	$(SPECIFIC_PATH)/port_init.c		\
	$(SPECIFIC_PATH)/port_write.c		\
	$(SPECIFIC_PATH)/port_read.c		\
	$(SPECIFIC_PATH)/port_setdir.c		\
	$(SPECIFIC_PATH)/port_getdir.c		\
	$(SPECIFIC_PATH)/port_specific.h	\
	$(GENERIC_PATH)/port.h
UART_M8=					\
	$(SPECIFIC_PATH)/m8-uart_getbaud.c	\
	$(SPECIFIC_PATH)/m8-uart_init.c		\
	$(SPECIFIC_PATH)/m8-uart_isvalid.c	\
	$(SPECIFIC_PATH)/m8-uart_read.c		\
	$(SPECIFIC_PATH)/m8-uart_setbaud.c	\
	$(SPECIFIC_PATH)/m8-uart_write.c	\
	$(SPECIFIC_PATH)/m8-uart_getbaud.c	\
	$(SPECIFIC_PATH)/m8-uart_open.c		\
	$(GENERIC_PATH)/uart.h			\
	$(QUEUE)
SPIM=						\
	$(SPECIFIC_PATH)/spim.c			\
	$(SPECIFIC_PATH)/spim_specific.h	\
	$(GENERIC_PATH)/spim.h

# TODO: complete me ...
USI_SRC=
I2C_SRC=
ADC_SRC=
UART_SRC=
PWM=
RTC=
INT=
CCP=
ETH=
DMA=

# MCU resources

ifeq ($(MCU),attiny25)
RESOURCES+=$(PORT) $(PIN)
endif
ifeq ($(MCU),atmega8)
RESOURCES+=$(PORT) $(PIN)
RESOURCES+=$(UART_M8)
RESOURCES+=$(CPU)
endif
ifeq ($(MCU),atmega88)
RESOURCES+=$(PORT) $(PIN)
endif
ifeq ($(MCU),atmega168)
RESOURCES+=$(PORT) $(PIN)
endif
ifeq ($(MCU),atmega16)
RESOURCES+=$(PORT) $(PIN)
endif
ifeq ($(MCU),atmega32)
RESOURCES+=$(PORT) $(PIN)
endif
ifeq ($(MCU),atmega128)
RESOURCES+=$(PORT) $(PIN)
endif
ifeq ($(MCU),atmega164p)
RESOURCES+=$(PORT) $(PIN)
endif

# .c + .h
RESOURCES+= $(GENERIC_PATH)/tinytypes.h

# .h only
INC=$(filter %.h, $(RESOURCES))
# .c only
SRC=$(filter %.c, $(RESOURCES))
# one object file per MCU
OBJ=$(SRC:%.c=%-$(MCU)-$(F_CPU).o)

.PHONY: all install clean
all: $(LIB) $(MCU)-$(F_CPU).d

install: all
	$(MKDIR) -p $(INC_INSTALL_DIR)
	$(CP) $(LIB) $(LIB_INSTALL_DIR)
	$(CP) $(INC) $(INC_INSTALL_DIR)

target: all
	$(OUT): $(OBJ)
		$(CC) $(CFLAGS) $(LIB) -c $< -o $@

$(LIB): $(OBJ)
	$(AR) rcs $@ $^

%-$(MCU)-$(F_CPU).o: %.c
	$(CC) -MM $(CFLAGS) -MQ $@ $< >> $(MCU)-$(F_CPU).d
	$(CC) $(CFLAGS) -c $< -o $@

clean:
	$(RM) -f $(OBJ) $(LIB)

$(MCU)-$(F_CPU).d: $(OBJ)

include $(MCU)-$(F_CPU).d
