#!/bin/bash
# make clean && make; cat deps; find . -name '*.o'

# Must have utils
CC=avr-gcc
AR=avr-ar
MKDIR=mkdir
CP=cp -f
RM=rm
F_CPU=8000000

# Final name
LIB=libehal-$(MCU)-$(F_CPU).a

# Get the lib folder based on the toolchain location.
LIB_INSTALL_DIR=$(shell dirname $(shell which $(CC)))/../avr/lib
INC_INSTALL_DIR=$(shell dirname $(shell which $(CC)))/../avr/include/ehal

# Get folders from within ehal.
GENERIC_PATH=ehal
PORTABLE_PATH=ehal/portable
SPECIFIC_PATH=ehal/$(ARCH)

CDEBUG =-gdwarf-2
CWARN =-Wall -Wstrict-prototypes
# optimization for compiling all the .c at the same time
ONCE_FLAGS=--combine -fwhole-program
CTUNING=-funsigned-char -funsigned-bitfields -fpack-struct -fshort-enums \
-ffunction-sections -fno-inline-small-functions -fno-split-wide-types \
-fno-tree-scev-cprop -Wl,--relax,--gc-sections

INCLUDE_DIR=-I. -I./ehal -I./$(SPECIFIC_PATH) -I./$(GENERIC_PATH)\
-I./$(GENERIC_PATH)/portable
CFLAGS = $(CDEBUG) $(CDEFS) $(CINCS) -Os $(CWARN) $(CSTANDARD) \
$(CEXTRA) $(INCLUDE_DIR)

ALL_CFLAGS=-mmcu=$(MCU) $(CFLAGS) -DF_CPU=$(F_CPU)

LDFLAGS=

# Resources definition. No need to change, change the ifeq of specific MCUs.

PORT=					\
	$(SPECIFIC_PATH)/port.c		\
	$(SPECIFIC_PATH)/port_specific.h\
	$(GENERIC_PATH)/port.h
PIN=					\
	$(PORTABLE_PATH)/pin.c		\
	$(PORTABLE_PATH)/pin.h		\
	$(SPECIFIC_PATH)/pin_specific.h
UART_DEV_X=				\
	$(SPECIFIC_PATH)/uart_dev_x.c	\
	$(GENERIC_PATH)/uart.h
UART_M8=				\
	$(SPECIFIC_PATH)/uart_m8-getbaud.c	\
	$(SPECIFIC_PATH)/uart_m8-init.c	\
	$(SPECIFIC_PATH)/uart_m8-isvalid.c	\
	$(SPECIFIC_PATH)/uart_m8-read.c	\
	$(SPECIFIC_PATH)/uart_m8-setbaud.c	\
	$(SPECIFIC_PATH)/uart_m8-write.c	\
	$(SPECIFIC_PATH)/uart_m8-getbaud.c	\
	$(GENERIC_PATH)/uart.h		\
	$(PORTABLE_PATH)/queue.c		\
	$(PORTABLE_PATH)/queue.h
#UART_X8=				\
	$(SPECIFIC_PATH)/uart_x8.c	\
	$(GENERIC_PATH)/uart.h		\
	$(PORTABLE_PATH)/queue.c		\
	$(PORTABLE_PATH)/queue.h
UART_X4P=				\
	$(SPECIFIC_PATH)/uart_x4p.c	\
	$(GENERIC_PATH)/uart.h		\
	$(PORTABLE_PATH)/queue.c		\
	$(PORTABLE_PATH)/queue.h
SPIM=					\
	$(SPECIFIC_PATH)/spim.c		\
	$(SPECIFIC_PATH)/spim_specific.h\
	$(GENERIC_PATH)/spim.h

# TODO: complete me ...
USI_SRC=
I2C_SRC=
ADC_SRC=
UART_SRC=
PWM=
RTC=
INT=
CCP=
ETH=
DMA=

# MCU resources

ifeq ($(MCU),attiny25)
RESOURCES+=$(PORT)
RESOURCES+=$(PIN)
endif
ifeq ($(MCU),atmega8)
RESOURCES+=$(PORT)
RESOURCES+=$(UART_M8)
# RESOURCES+=$(PIN)
# RESOURCES+=$(UART_DEV_X)
# RESOURCES+=$(SPIM)
endif
ifeq ($(MCU),atmega88)
RESOURCES+=$(PORT)
# RESOURCES+=$(PIN)
# RESOURCES+=$(UART_X8)
# RESOURCES+=$(SPIM)
endif
ifeq ($(MCU),atmega168)
RESOURCES+=$(PORT)
RESOURCES+=$(PIN)
# RESOURCES+=$(UART_X8)
# RESOURCES+=$(SPIM)
endif
ifeq ($(MCU),atmega16)
RESOURCES+=$(PORT)
RESOURCES+=$(PIN)
# RESOURCES+=$(UART_X)
# RESOURCES+=$(SPIM)
endif
ifeq ($(MCU),atmega32)
RESOURCES+=$(PORT)
RESOURCES+=$(PIN)
# RESOURCES+=$(UART_X)
# RESOURCES+=$(SPIM)
endif
ifeq ($(MCU),atmega128)
RESOURCES+=$(PORT)
RESOURCES+=$(PIN)
# RESOURCES+=$(UART_X)
# RESOURCES+=$(SPIM)
endif
ifeq ($(MCU),atmega164p)
RESOURCES+=$(PORT)
RESOURCES+=$(PIN)
# RESOURCES+=$(UART_X4P)
endif

# .c + .h
RESOURCES+= $(GENERIC_PATH)/tinytypes.h

# .h only
INC=$(filter %.h, $(RESOURCES))
# .c only
SRC=$(filter %.c, $(RESOURCES))
# one object file per MCU
OBJ=$(SRC:%.c=%-$(MCU)-$(F_CPU).o)

.PHONY: all install clean
all: $(LIB)

install: all
	$(MKDIR) -p $(INC_INSTALL_DIR)
	$(CP) $(LIB) $(LIB_INSTALL_DIR)
	$(CP) $(INC) $(INC_INSTALL_DIR)

$(LIB): $(OBJ)
	$(AR) rcs $@ $^

%-$(MCU)-$(F_CPU).o : %.c
	$(CC) $(ALL_CFLAGS) -c $< -o $@

clean:
	$(RM) -f $(OBJ) $(LIB)
