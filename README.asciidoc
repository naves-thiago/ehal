eHAL
====

Introduction
------------

+ eHAL stands for embedded hardware abstraction layer. The idea is to create an
API as simple as arduino's but versatile enought to run on many diferent MCUs
ranging from 8 to 32 bits. It intends to be as simple and clear as possible and
for the best portability is implemented in C.
+ This file contains a brief on the organization of this repository.
+ This project uses Doxygen for documentation. To generate the doxygen files
run:

----
doxygen
----
on the project root folder, a *pages/* folder will be created with the doc.
+ This doc is intended to be a manual and API reference, not a tutorial. For a
tutorial, look at the tests

Some Observations
-----------------

+ The Makefile generates .a files, that are suffix for static libs of gcc.
You may use eHAL by linking your project against one of the generated .a files
or copying the .c and .h files to your project and recompiling them there.
+ The output is per MCU and is in the
format: libehal-$(MCU)-$(F_CPU).a
+ Good practices: The identation is in TABs and the coding style is the
K&R. VIM users can add this to their ~/.vimrc:
----
au filetype c set cindent
au filetype c set incsearch
au filetype c set cinoptions=:0,p0,t0
au filetype c set cinwords=if,else,while,do,for,switch,case
au filetype c set formatoptions=tcqr
----
NOTE: If source code is in other format, please folow that code format.

Planned Architectures
---------------------

|==============================================================================
|avr
|msp430
|hcs08
|8051
|arm7
|arm9
|arm-cortex-m3
|==============================================================================

Folders Organization:
---------------------

.EHAL
*	Makefiles
*	LICENCE
*	README
*	LOG
*	Doxyfile
*	dox/
**		main.dox
**		examples.dox
*	ehal/
**		<headers>
**		portable/
***			queue_init.c
***			...
***			pin_init.c
***			...
**		avr/
***			port.c
***			twi.c
***			spi.c
***			...
**		lpc21xx/
***			...
**		lpc1768/
***			...
**		msp430/
***			...
**		...

Modules
-------
Implement the folowing modules to support a new platform.

.Functions unsuported by the hardware
NOTE: If a function is impossible to do on some platform. A pulldown function on
a device that don't have an internal pulldown resistor, don't implement a stub.
It will only make harder to find the problem.

+ This API is still under development and might change. Browse the .h from
the ehal folder for a more precise syntax.

----
port:
	init		(number : int) : ptr
	isvalid		(number : int) : ptr
	write		(id : ptr, mask : int, value : int) : void
	read		(id : ptr) : int
	setdir		(id : ptr, mask : int, value : int) : void
	getdir		(id : ptr) : int
	setpullup	(id : ptr, mask : int, value : int) : void
	getpullup	(id : ptr) : int
	setpulldown	(id : ptr, mask : int, value : int) : void
	getpulldown	(id : ptr) : int
	onchange	(id : ptr, fn : fn_ptr, mask : int) : void
timer: (unfinished)
	init		(number : int) : ptr
	isvalid		(id : ptr) : ptr
pwm: (unfinished)
	init		(number : int) : ptr
	isvalid		(id : ptr) : ptr
	setfreq		(id : ptr, freq : int) : void
	getfreq		(id : ptr) : int
	setval		(id : ptr, val : float) : void
	getval		(id : ptr) : float
uart: (unfinished)
	init		(number : int) : ptr
	isvalid		(id : ptr) : bool
	setbaud		(id : ptr, baud : int) : void
	getbaud		(id : ptr) : int
	setnbits	(id : ptr, nbits : int) : void
	getnbits	(id : ptr) : int
	setstopbits	(id : ptr) : void
	getstopbits	(id : ptr) : int
	write		(id : ptr, buf : byte*, bufsz : int) : void
	read		(id : ptr, buf : byte*, bufsz : int) : void
i2c: (unfinished)
	init		(number : int) : ptr
	isvalid		(id : ptr) : bool
	setfreq		(id : ptr, freq : int) : void
	getfreq		(id : ptr, freq : int) : void
	write		(id : ptr, buf : byte*, bufsz : int) : void
	read		(id : ptr, buf : byte*, bufsz : int) : void
spi: (unfinished)
	init		(number : int) : ptr
	init		(id : ptr) : void
	isvalid		(id : ptr) : bool
	setfreq		(id : ptr, freq : int) : void
	getfreq		(id : ptr, freq : int) : void
	write		(id : ptr, buf : byte*, bufsz : int) : void
	read		(id : ptr, buf : byte*, bufsz : int) : void
cpu/sleep: (unfinished)
	init		(number : int) : ptr
dma: (unfinished)
	init		(number : int) : ptr
rtc: (unfinished)
	init		(number : int) : ptr
----
