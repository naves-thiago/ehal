eHAL
====

Introduction
------------

+ eHAL stands for embedded hardware abstraction layer. The idea is to create an
API as simple as arduino's but versatile enought to run on many diferent MCUs
ranging from 8 to 32 bits.
+ This file contains a brief on the organization of this repository.
+ This project uses Doxygen for documentation. To generate the doxygen files
run:

----
doxygen
----
on the project root folder, a *pages/* folder will be created with the doc.

Some Observations
-----------------

+ The Makefile generates .a files. This is the suffix for static libs of gcc.
You may use this lib linking your project against one of the generated .a files
or copying the .c and .h files from eHAL.
+ The output is per MCU and is in the
format: libehal-$(MCU)-$(F_CPU).a


== Planned Architectures ==

|==============================================================================
|avr
|msp430
|hcs08
|8051
|arm7
|arm9
|arm-cortex-m3
|==============================================================================

Folders Organization:
---------------------

.EHAL
*	Makefiles
*	LICENCE
*	README
*	LOG
*	Doxyfile
*	dox/
**		main.dox
**		examples.dox
*	ehal/
**		<headers>
**		portable/
***			queue.c
***			pin.c
***			rwl.c
***			mutex.c
**		avr/
***			port.c
***			twi.c
***			spi.c
***			...
**		lpc21xx/
***			...
**		lpc1768/
***			...
**		msp430/
***			...
**		...

Modules
-------
Implement the folowing modules to support a new platform.

.Functions unsuported by the hardware
NOTE: If a function is impossible to do on some platform. A pulldown function on
a device that don't have an internal pulldown resistor, don't implement a stub.
It will only make harder to find the problem.

+ This API is still under development and might change. Browse the .h from
the ehal folder for a more precise syntax.

----
port:
	init		(number : int) : ptr
	isvalid		(number : int) : ptr
	write		(id : ptr, mask : int, value : int) : void
	read		(id : ptr) : int
	set_dir		(id : ptr, mask : int, value : int) : void
	get_dir		(id : ptr) : int
	set_pullup	(id : ptr, mask : int, value : int) : void
	get_pullup	(id : ptr) : int
	set_pulldown	(id : ptr, mask : int, value : int) : void
	get_pulldown	(id : ptr) : int
	onchange	(id : ptr, fn : fn_ptr, mask : int) : void
timer: (unfinished)
	init		(id : ptr) : void
	isvalid		(id : ptr) : ptr
pwm: (unfinished)
	init		(id : ptr) : void
	isvalid		(id : ptr) : ptr
	set_freq	(id : ptr, freq : int) : void
	get_freq	(id : ptr) : int
	set_val		(id : ptr, val : float) : void
	get_val		(id : ptr) : float
uart: (unfinished)
	init		(id : ptr) : void
	isvalid		(id : ptr) : bool
	set_baud	(id : ptr, baud : int) : void
	get_baud	(id : ptr) : int
	set_nbits	(id : ptr, nbits : int) : void
	get_nbits	(id : ptr) : int
	set_stopbits	(id : ptr) : void
	get_stopbits	(id : ptr) : int
	write		(id : ptr, buf : byte*, bufsz : int) : void
	read		(id : ptr, buf : byte*, bufsz : int) : void
i2c: (unfinished)
	init		(id : ptr) : void
	isvalid		(id : ptr) : bool
	set_freq	(id : ptr, freq : int) : void
	get_freq	(id : ptr, freq : int) : void
	write		(id : ptr, buf : byte*, bufsz : int) : void
	read		(id : ptr, buf : byte*, bufsz : int) : void
spi: (unfinished)
	init		(id : ptr) : void
	isvalid		(id : ptr) : bool
	set_freq	(id : ptr, freq : int) : void
	get_freq	(id : ptr, freq : int) : void
	write		(id : ptr, buf : byte*, bufsz : int) : void
	read		(id : ptr, buf : byte*, bufsz : int) : void
sleep: (unfinished)
cpu: (unfinished)
dma: (unfinished)
rtc: (unfinished)
----
